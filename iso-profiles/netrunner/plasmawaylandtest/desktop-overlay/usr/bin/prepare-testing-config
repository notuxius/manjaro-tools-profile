#!/bin/bash

# set -x

echo

if [[ $EUID -eq 0 ]]; then
    echo "This script must not be run as root. Exiting..."
    exit 1
fi

err_opt_text="Use -m/-c or -f/-u single option for desktop packages toggling. Exiting..."

if [[ ${#1} -gt 2 ]]; then
    echo "$err_opt_text"
    exit 1
fi

opts='mcfu'

if [[ ${#1} -gt 1 ]]; then
    getopts "${opts}" arg

    if [[ $arg == "?" ]]; then
        echo "$err_opt_text"
        exit 1
    fi
fi

# check free space in and display warning 
disk_free_space=$(df -h / | tail -1 | awk '{print $4}' | sed s/G//)

if [[ $(printf '%.*f' 0 $disk_free_space) -lt 30 ]]; then
    echo "Low free disk space on root partition - profile might not built"
    echo
fi

cd ${HOME}

# create if not exists manjaro tools folder in current current user's home directory
mkdir -p $(eval echo .config/manjaro-tools/)

# check if manjaro tools config file exists
if [[ -r $(eval echo /etc/manjaro-tools/manjaro-tools.conf) ]]; then
    echo "System-wide manjaro tools configuration found"
    echo
    source_conf_file=$(eval echo /etc/manjaro-tools/manjaro-tools.conf)
    target_conf_file=$(eval echo .config/manjaro-tools/manjaro-tools.conf)
    # target_backup_conf_dir=$(eval echo .config/manjaro-tools/manjaro-tools-conf-backups/)
    profile_conf_file=$(eval echo plasma-wayland-testing-manjaro-tools-profile/iso-profiles/netrunner/plasmawaylandtest/profile.conf)
    lsb_release_file=$(eval echo /etc/lsb-release)
    # os_release_file=$(eval echo /usr/lib/os-release)
else
    echo "System-wide manjaro tools configuration not found"
    echo "Manjaro tools are required for building profile ISOs"
    printf "It can be obtained by installing next packages:\nmanjaro-tools-base\nmanjaro-tools-iso\nmanjaro-tools-pkg\nmanjaro-tools-yaml\nExiting..."
    exit 1
fi

# toggling of minimal desktop packages
desktop_packages_file=$(eval echo plasma-wayland-testing-manjaro-tools-profile/iso-profiles/netrunner/plasmawaylandtest/Packages-Desktop)
live_packages_file=$(eval echo plasma-wayland-testing-manjaro-tools-profile/iso-profiles/netrunner/plasmawaylandtest/Packages-Live)
mhwd_packages_file=$(eval echo plasma-wayland-testing-manjaro-tools-profile/iso-profiles/netrunner/plasmawaylandtest/Packages-Mhwd)

# err_prepare_text="Cannot modify one of the defaults in current user's home manjaro tools configuration file\n"
err_prepare_text="was not modified in current user's home manjaro tools configuration file\n"

# check if current current user's home config file already exists - and displays info and confirmation for overwriting it -
# then copy system-wide manjaro tools config file into current current user's home directory for further modifications - 
# current current user's home config file take precedence over the /etc system's one
if [[ -r $source_conf_file && -w $target_conf_file ]]; then
    echo "There is existing manjaro tools configuration file in current user's home folder"
    read -p "Backup and overwrite existing manjaro tools configuration file? " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo
        echo
        # mkdir -p $target_backup_conf_dir
        # $target_conf_file-$(date +%Y-%m-%d-%H-%M-%S).bak
        mv -f $target_conf_file $target_conf_file.bak
        cp -f $source_conf_file $target_conf_file
    else
        echo
        echo
    fi
    
else
    echo "Copying system manjaro tools configuration file into current user's home folder"
    cp -f $source_conf_file $target_conf_file
    echo
fi

if [[ -r $target_conf_file && -w $target_conf_file ]]; then
    # change profile build repository to unstable
    cat $target_conf_file | grep -q '# target_branch=stable' && sed -i "s|# target_branch=stable|target_branch=unstable|" $target_conf_file && printf "Changed profile build repository to unstable\n" || printf "Profile build repository $err_prepare_text"

    # change profile ISO label from Manjaro to Netrunner Rolling Wayland
    cat $target_conf_file | grep -q '# dist_branding="MJRO"' && sed -i 's|# dist_branding="MJRO"|dist_branding="NTRW"|' $target_conf_file && printf "Changed profile ISO label to Netrunner Rolling Wayland (NTRW)\n" || printf "Profile ISO label $err_prepare_text"
fi

if [[ -r $target_conf_file && -r $lsb_release_file ]]; then
    # change profile distribution release to ...codename-year.month.day.hour... version format
    cat $target_conf_file | grep -q 'dist_release=' && sed -i "s|.*dist_release=.*|dist_release=\$(source ${lsb_release_file}; echo \${DISTRIB_CODENAME,,})-\$(date --utc +%Y.%-m.%-d.%-H)|" $target_conf_file && printf "Changed profile distribution release to ...codename-year.month.day.hour... version format\n" || printf "Profile distribution release version $err_prepare_text"
fi

echo

# change distribution release to ...BUILD_ID.day.hour... version format
# if [ -f $lsb_release_file ]; then
#     source /etc/lsb-release
#     if [[ $DISTRIB_RELEASE =~ ^[0-9]{4}.[0-9]{1,2}$ ]]; then
#         sed -i 's|# dist_release=.*|dist_release=\$(source /etc/lsb-release; echo "${DISTRIB_RELEASE}").\$(date --utc +%-d.%-H)|' $target_conf_file || printf "$err_prepare_text"
#     elif [[ $DISTRIB_RELEASE =~ ^[0-9]{4}.[0-9]{1,2}.[0-9]{2}.[0-9]{2}$ ]]; then
#         sed -i 's|# dist_release=.*|dist_release=$(source /etc/lsb-release; DISTRIB_RELEASE=${DISTRIB_RELEASE%.*}; echo "${DISTRIB_RELEASE%.*}").\$(date --utc +%-d.%-H)|' $target_conf_file || printf "$err_prepare_text"
#     else
#         if [ -f $os_release_file ]; then
#             source /usr/lib/os-release
#             sed -i 's|# dist_release=.*|dist_release=$(source /usr/lib/os-release; DISTRIB_RELEASE=$(echo $BUILD_ID \| sed "s\|\\.0\|\\.\|"); echo "${DISTRIB_RELEASE}").\$(date --utc +%-d.%-H)|' $target_conf_file || printf "$err_prepare_text"
#         fi
#     fi
# fi

# check if internet is available
echo "Checking internet connection availability..."
case "$(curl -s --max-time 10 -I https://github.com | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
    [23]) git_clone_profile='git clone https://github.com/notuxius/plasma-wayland-testing-manjaro-tools-profile.git # 2> /dev/null)'
        read -p "Update mirrors list for selecting best build mirror and profile kernel? " -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo
            echo
            sudo pacman-mirrors -f 5
            echo
            sudo pacman -Sy
            echo
            if [[ -x $(which pkgfile) ]]; then
                sudo pkgfile --update
            fi
            echo
        else
            echo
            echo
        fi

        # select best build mirror
        best_server_match=$(grep '^Server = ' /etc/pacman.d/mirrorlist | head -1 | cut -c10- | sed "s|/\(un\)*stable/.*||")
        
        if [[ -r $target_conf_file && -w $target_conf_file ]]; then
            cat $target_conf_file | grep -q '# build_mirror=' && sed -i "s|# build_mirror=.*|build_mirror=${best_server_match}|" $target_conf_file || printf "Profile build mirror $err_prepare_text"
            
            current_build_mirror=$(cat $target_conf_file | grep -E '^build_mirror=' | sed "s|build_mirror=||")
            
            echo "Current profile build mirror - ${current_build_mirror}"
            echo
            
            # select latest non-realtime kernel available in unstable repo
            latest_nonrt_kernel=$(wget -q -O - $best_server_match/unstable/core/x86_64/core.db.tar.gz | tar -tz | grep '^linux[4-9]' | grep -v 'headers' | grep -v 'desc' | sed "s|-.*||" | sort -Vr | head -n1)
            cat $target_conf_file | grep -q '# kernel=' && sed -i "s|# kernel=.*|kernel=${latest_nonrt_kernel}|" $target_conf_file || printf "Profile kernel $err_prepare_text"
            
            if cat $target_conf_file | grep -q '^# kernel'; then
                current_kernel=$(sed -n "/^# kernel/ s|# kernel=||p" $target_conf_file)
            else
                current_kernel=$(sed -n "/^kernel/ s|kernel=||p" $target_conf_file)
            fi
        fi
        
        echo "Current profile kernel - ${current_kernel}"
        echo
        
#         if [[ -x $(which mhwd-kernel 2> /dev/null) ]]; then
#             printf "Other v4.x kernels:\n"
#             mhwd-kernel -l | cut -c6- | grep '^linux[4-9]' | grep -vw "${latest_nonrt_kernel}" | sort -Vr
#         fi

        if [[ ! -z $(ls -A plasma-wayland-testing-manjaro-tools-profile/ 2> /dev/null) && -w plasma-wayland-testing-manjaro-tools-profile/ ]]; then
            echo "There is non-empty build profile folder in current user's home folder"
            read -p "Backup, remove and redownload existing profile folder? " -n 1 -r
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                echo
                echo
                date_time_stamp=$(date +%Y-%m-%d-%H-%M-%S)
                if mkdir -p $(eval echo plasma-wayland-testing-manjaro-tools-profile-backups/) && tar -czf plasma-wayland-testing-manjaro-tools-profile-backups/plasma-wayland-testing-manjaro-tools-profile-${date_time_stamp}.tar.gz plasma-wayland-testing-manjaro-tools-profile/; then
                    echo "Profile folder was backed up with name 'plasma-wayland-testing-manjaro-tools-profile-${date_time_stamp}.tar.gz'"
                    echo "in current user's home 'plasma-wayland-testing-manjaro-tools-profile-backups' folder"
                    echo
                else
                    echo
                    echo
                fi
                if rm -rf plasma-wayland-testing-manjaro-tools-profile/; then
                    echo "Existing profile folder was removed from current user's home folder"
                    echo
                else
                    echo
                    echo
                fi
                
                # echo "Downloading build profile folder into current user's home folder..."
                eval $git_clone_profile
                echo
            else
                echo
                echo
            fi
        else
            # echo "Downloading build profile folder into current user's home folder..."
            eval $git_clone_profile
            echo
        fi

        echo "Looking for available kernel modules and drivers..."
        echo
        
        available_kernel_modules=$(wget -q -O - ${best_server_match}/unstable/extra/x86_64/extra.db.tar.gz | tar -tz | grep -v 'desc' | grep ${current_kernel} | sed -r "s|-[0-9]+\.[0-9].*||" | sed -r "s|-[0-9]+\:[0-9].*||" | sed -r "s|-[0-9]{4}.*||" | sed "s|${current_kernel}|KERNEL|")
        
        if [[ -w $desktop_packages_file && -w $live_packages_file && -w $mhwd_packages_file ]]; then
            # comment all modules and drivers
            sed -i "/^[^#].*# available-kernel-modules-toggle$/ s|\(.*\)|# \1|" $desktop_packages_file
            sed -i "/^[^#].*# available-kernel-drivers-toggle$/ s|\(.*\)|# \1|" $desktop_packages_file
            
            sed -i "/^[^#].*# available-kernel-modules-toggle$/ s|\(.*\)|# \1|" $live_packages_file
            sed -i "/^[^#].*# available-kernel-drivers-toggle$/ s|\(.*\)|# \1|" $live_packages_file
            
            sed -i "/^[^#].*# available-kernel-modules-toggle$/ s|\(.*\)|# \1|" $mhwd_packages_file
            sed -i "/^[^#].*# available-kernel-drivers-toggle$/ s|\(.*\)|# \1|" $mhwd_packages_file
            
            # uncomment only available modules
            while read -r line; do
                sed -i "/${line} .*# available-kernel-modules-toggle$/ s|^# \(.*\)${line}|\1${line}|" $desktop_packages_file
            done <<< $available_kernel_modules
            
            while read -r line; do
                sed -i "/${line} .*# available-kernel-modules-toggle$/ s|^# \(.*\)${line}|\1${line}|" $live_packages_file
            done <<< $available_kernel_modules
            
            while read -r line; do
                sed -i "/${line} .*# available-kernel-modules-toggle$/ s|^# \(.*\)${line}|\1${line}|" $mhwd_packages_file
            done <<< $available_kernel_modules

            available_kernel_drivers=$(sed "s|KERNEL-||" <<< $available_kernel_modules)
            
            # uncomment only available drivers
            while read -r line; do
                sed -i "/$line-utils .*# available-kernel-drivers-toggle$/ s|^# ||" $mhwd_packages_file
            done <<< $available_kernel_drivers
        
            selected_kernel_modules=$(grep '^[^#].* # available-kernel-modules-toggle$' $desktop_packages_file | sed "s|^>nonfree_default ||" | sed "s|^>nonfree_multilib ||" | sed "s|KERNEL-||"| sed "s|# available-kernel-modules-toggle$||"; grep '^[^#].* # available-kernel-modules-toggle$' $live_packages_file | sed "s|^>nonfree_default ||" | sed "s|^>nonfree_multilib ||" | sed "s|KERNEL-||"| sed "s|# available-kernel-modules-toggle$||"; grep '^[^#].* # available-kernel-modules-toggle$' $mhwd_packages_file | sed "s|^>nonfree_default ||" | sed "s|^>nonfree_multilib ||" | sed "s|KERNEL-||"| sed "s|# available-kernel-modules-toggle$||")
            
            selected_kernel_modules=$(sort <<< $selected_kernel_modules | uniq)
            
            printf "Selected kernel modules:\n${selected_kernel_modules}"
            echo
            echo
            
            selected_kernel_drivers=$(grep '^[^#].* # available-kernel-drivers-toggle$' $mhwd_packages_file | sed "s|^>nonfree_default ||" | sed "s|^>nonfree_multilib ||" | sed "s|# available-kernel-drivers-toggle$||")
            
            selected_kernel_drivers=$(sort <<< $selected_kernel_drivers | uniq)
            
            printf "Selected kernel drivers:\n${selected_kernel_drivers}"
            echo
            echo
        else
            echo "Unable to select available kernel modules and drivers"
            echo
        fi
        ;;
        
        *) echo "Unable to select best build mirror and latest profile kernel"
        echo "They can be changed manually in manjaro tools configuration file in current user's home folder"
        echo
        echo "Unable to download build profile"
        echo "It can be obtained at https://github.com/notuxius/plasma-wayland-testing-manjaro-tools-profile"
        echo
        ;;
esac

err_profile_text="Cannot make modifications in manjaro tools profile configuration file\n"
err_desktop_packages_min_text="Desktop packages file is already set for minimal profile - no modifications were made in it"
err_desktop_packages_full_text="Desktop packages file is already set for full profile - no modifications were made in it"
info_rerun_text="Rerun this script after manual change of kernel version - for packaging available kernel modules and drivers"
info_profile_command_text="Profile ISOs can be built with 'buildiso -p plasmawaylandtest' command"

# using arguments fetched with 'getopts' command at the begging of the script
if [[ -w $profile_conf_file ]]; then

    case "${arg}" in
        m|c) # comment/remove additional desktop packages and systemd services
            # change distribution release to ...codename-minimal-year.month.day.hour... version format
            echo "Minimal profile - without some additional desktop packages and systemd services"
            
#             cat $desktop_packages_file | grep -q '^[^# ].*# minimal-packages-toggle$' && sed -i 's|^\([^# ].*\)# minimal-packages-toggle$|# \1# minimal-packages-toggle|g' $desktop_packages_file || echo "$err_desktop_packages_min_text"

            sed -i 's|^#*extra="true"|extra="false"|' $profile_conf_file

            sed -i "/^# minimal-services-toggle/! s| 'org.cups.cupsd'||" $profile_conf_file || printf "$err_profile_text" 
            sed -i "/^# minimal-services-toggle/! s| 'smbd'||" $profile_conf_file || printf "$err_profile_text" 
            sed -i "/^# minimal-services-toggle/! s| 'nmbd'||" $profile_conf_file || printf "$err_profile_text"
            
            sed -i "/^addgroups=/ s|,lp||" $profile_conf_file || printf "$err_profile_text"
            sed -i "/^addgroups=/ s|,sys||" $profile_conf_file || printf "$err_profile_text"
            echo
            echo "$info_rerun_text"
            echo
            echo "$info_profile_command_text"
            echo
            ;;
        
        f|u) # uncomment/include additional desktop packages and systemd services
            # change distribution release to ...codename-year.month.day.hour... version format
            echo "Full profile - with some additional desktop packages and systemd services"
    
#             cat $desktop_packages_file | grep -q '^# .*# minimal-packages-toggle$' && sed -i 's|^# \(.*\)# minimal-packages-toggle$|\1# minimal-packages-toggle|g' $desktop_packages_file || echo "$err_desktop_packages_full_text"

            sed -i 's|^#*extra="false"|extra="true"|' $profile_conf_file

            sed -i "/org.cups.cupsd/! s|\(^enable_systemd=.*[^)]\)|\1 'org.cups.cupsd'|" $profile_conf_file || printf "$err_profile_text"
            sed -i "/smbd/! s|\(^enable_systemd=.*[^)]\)|\1 'smbd'|" $profile_conf_file || printf "$err_profile_text"
            sed -i "/nmbd/! s|\(^enable_systemd=.*[^)]\)|\1 'nmbd'|" $profile_conf_file || printf "$err_profile_text"
            
            sed -i "/lp/! s|\(^addgroups=.*[^\"]\)|\1,lp|" $profile_conf_file || printf "$err_profile_text"
            sed -i "/sys/! s|\(^addgroups=.*[^\"]\)|\1,sys|" $profile_conf_file || printf "$err_profile_text"
            echo
            echo "$info_rerun_text"
            echo
            echo "$info_profile_command_text"
            echo
            ;;
    esac
    
    if [[ -z ${@} ]]; then
        echo "Current profile - desktop packages and systemd services were not modified"
        echo
        echo "$info_rerun_text"
        echo
        echo "$info_profile_command_text"
        echo
    fi
fi
echo 'Done.'
exit 0
