#!/bin/bash

# TODO add checking of sed success completion
# https://unix.stackexchange.com/questions/88123/why-sed-does-not-return-exit-status-if-regex-does-not-matched?rq=1

# create if not exists manjaro tools folder in user's home directory
mkdir -p $(eval echo "${HOME}"/.config/manjaro-tools/)

# check if manjaro tools config file exists
if [ -f $(eval echo /etc/manjaro-tools/manjaro-tools.conf) ]; then
    echo "System manjaro tools configuration found"
    source_conf_file=$(eval echo /etc/manjaro-tools/manjaro-tools.conf)
    target_conf_file=$(eval echo ${HOME}/.config/manjaro-tools/manjaro-tools.conf)
    lsb_release_file=$(eval echo /etc/lsb-release)
    os_release_file=$(eval echo /usr/lib/os-release)
else
    echo "System manjaro tools configuration not found"
    echo "Exiting..."
    exit 1
fi

# check if user's home config file already exists - and displays info and confirmation for overwriting it -
# then copy system-wide manjaro tools config file into user's home directory for further modifications - 
# user's home config file take precedence over the /etc system's one
if [ -f $(eval echo $target_conf_file) ]; then
    echo "You have existing manjaro tools configuration file in your home directory"
    cp -i $source_conf_file $target_conf_file
    echo "Replacing existing manjaro tools configuration file in your home directory"
else
    echo "Copying system manjaro tools configuration file in your home directory"
    cp $source_conf_file $target_conf_file
    echo "Copying system manjaro tools configuration file into your home directory"
fi

err_prepare_text="Could not make modifications in user's home manjaro tools configuration file\n"

# use unstable repos
sed -i "s|# target_branch=stable|target_branch=unstable|" $target_conf_file || { printf "$err_prepare_text";}

# change iso label from Manjaro into Netrunner
sed -i 's|# dist_branding="MJRO"|dist_branding="NTRW"|' $target_conf_file || { printf "$err_prepare_text";}

# change distribution release to BUILD_ID(with month without possible leading zero).day.hour format
if [ -f $lsb_release_file ]; then
    source /etc/lsb-release
    if [[ $DISTRIB_RELEASE =~ ^[0-9]{4}.[0-9]{1,2}$ ]]; then
        sed -i 's|# dist_release=.*|dist_release=\$(source /etc/lsb-release; echo "${DISTRIB_RELEASE}").\$(date +%-d.%-H)|' $target_conf_file || { printf "$err_prepare_text"; }
    elif [[ $DISTRIB_RELEASE =~ ^[0-9]{4}.[0-9]{1,2}.[0-9]{2}.[0-9]{2}$ ]]; then
        sed -i 's|# dist_release=.*|dist_release=$(source /etc/lsb-release; DISTRIB_RELEASE=${DISTRIB_RELEASE%.*}; echo "${DISTRIB_RELEASE%.*}").\$(date +%-d.%-H)|' $target_conf_file || { printf "$err_prepare_text"; }
    else
        if [ -f $os_release_file ]; then
            source /usr/lib/os-release
            sed -i 's|# dist_release=.*|dist_release=$(source /usr/lib/os-release; DISTRIB_RELEASE=$(echo $BUILD_ID \| sed "s\|\\.0\|\\.\|"); echo "${DISTRIB_RELEASE}").\$(date +%-d.%-H)|' $target_conf_file || { printf "$err_prepare_text"; }
        fi
    fi
fi

# check if internet is availabe - select best mirror and clone latest github profile into user's home directory
case "$(curl -s --max-time 5 -I https://github.com | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
  [23]) cd ${HOME}
        # sudo pacman-mirrors -f 5
        best_server_match=$(grep '^Server = ' /etc/pacman.d/mirrorlist | head -1 | cut -c10- | sed "s|/unstable/\$repo/\$arch||")
        sed -i "s|# build_mirror=.*|build_mirror=${best_server_match}|" $target_conf_file || { printf "$err_prepare_text";}
        git clone https://github.com/notuxius/manjaro-tools-profile.git
        echo "Profile isos can be built with 'buildiso -p kdewaylandtest' command"
        ;;
  *) echo "Unable to select best mirror and download Netrunner Rolling Wayland/Xorg iso testing profile"
     echo "Please visit https://github.com/notuxius/manjaro-tools-profile for downloading"
     ;;
esac

# select latest non-realtime kernel available
latest_nonrt_kernel="$(mhwd-kernel -l | cut -c11- | grep '^[0-9]' | grep '[^rt]$' | sort -nr | head -n1)"

sed -i "s|# kernel=.*|kernel=linux${latest_nonrt_kernel}|" $target_conf_file || { printf "$err_prepare_text";}
echo "Changing kernel in manjaro tools configuration file in your home directory to latest non-realtime available"

echo 'Done.'
exit 0
